defmodule AshDoubleEntry.Test.Repo.Migrations.Init do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:transfers, primary_key: false) do
      add(:id, :binary, null: false, primary_key: true)
      add(:amount, :money_with_currency, null: false)

      add(:timestamp, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:from_account_id, :uuid)
      add(:to_account_id, :uuid)
    end

    create table(:balances, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:balance, :money_with_currency, null: false)

      add(
        :transfer_id,
        references(:transfers, column: :id, name: "balances_transfer_id_fkey", type: :binary),
        null: false
      )

      add(:account_id, :uuid, null: false)
    end

    create table(:accounts, primary_key: false) do
      add(:allow_zero_balance, :boolean, default: true)
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    alter table(:transfers) do
      modify(
        :from_account_id,
        references(:accounts, column: :id, name: "transfers_from_account_id_fkey", type: :uuid)
      )

      modify(
        :to_account_id,
        references(:accounts, column: :id, name: "transfers_to_account_id_fkey", type: :uuid)
      )
    end

    alter table(:balances) do
      modify(
        :account_id,
        references(:accounts, column: :id, name: "balances_account_id_fkey", type: :uuid)
      )
    end

    create unique_index(:balances, [:account_id, :transfer_id],
             name: "balances_unique_references_index"
           )

    alter table(:accounts) do
      add(:identifier, :text, null: false)
      add(:currency, :text, null: false)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create unique_index(:accounts, [:identifier], name: "accounts_unique_identifier_index")
  end

  def down do
    drop_if_exists(
      unique_index(:accounts, [:identifier], name: "accounts_unique_identifier_index")
    )

    alter table(:accounts) do
      remove(:inserted_at)
      remove(:currency)
      remove(:identifier)
    end

    drop_if_exists(
      unique_index(:balances, [:account_id, :transfer_id],
        name: "balances_unique_references_index"
      )
    )

    drop(constraint(:balances, "balances_account_id_fkey"))

    alter table(:balances) do
      modify(:account_id, :uuid)
    end

    drop(constraint(:transfers, "transfers_from_account_id_fkey"))

    drop(constraint(:transfers, "transfers_to_account_id_fkey"))

    alter table(:transfers) do
      modify(:to_account_id, :uuid)
      modify(:from_account_id, :uuid)
    end

    drop(table(:accounts))

    drop(constraint(:balances, "balances_transfer_id_fkey"))

    drop(table(:balances))

    drop(table(:transfers))
  end
end
